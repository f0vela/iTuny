#region ---- Function Area
#comments-start
	***********************************************************************
	Here are the functions used in many parts of the app.
	
	Software and Images provided under GPLv2 License, please respect it.
	
	Functions:

	- RC4
	Paramenters:
	1. Data
	2. Phrase
	3. Decrypt
	Description:
	This function allows you to encrypt and decrypt the data you pass with a
	key prase.
	***********************************************************************
#comments-end
Func RC4($Data, $Phrase, $Decrypt)
  Local $a, $b, $i, $j, $k, $cipherby, $cipher
  Local $tempSwap, $temp, $PLen
  Local $sbox[256], $key[256]
  
  $PLen = StringLen($Phrase)
  For $a = 0 To 255
     $key[$a] = Asc(StringMid($Phrase, Mod($a, $PLen) + 1, 1))
     $sbox[$a] = $a
  Next
  
  $b = 0
  For $a = 0 To 255
     $b = Mod( ($b + $sbox[$a] + $key[$a]), 256)
     $tempSwap = $sbox[$a]
     $sbox[$a] = $sbox[$b]
     $sbox[$b] = $tempSwap
  Next
  
  If $Decrypt Then
     For $a = 1 To StringLen($Data) Step 2
        $i = Mod(($i + 1), 256)
        $j = Mod(($j + $sbox[$i]), 256)
        $k = $sbox[Mod(($sbox[$i] + $sbox[$j]), 256)]
        $cipherby = BitXOR(Dec(StringMid($Data, $a, 2)), $k)
        $cipher = $cipher & Chr($cipherby)
     Next
  Else
     For $a = 1 To StringLen($Data)
        $i = Mod(($i + 1), 256)
        $j = Mod(($j + $sbox[$i]), 256)
        $k = $sbox[Mod(($sbox[$i] + $sbox[$j]), 256)]
        $cipherby = BitXOR(Asc(StringMid($Data, $a, 1)), $k)
        $cipher = $cipher & Hex($cipherby, 2)
     Next
  EndIf
  Return $cipher
EndFunc  ;==>RC4
#comments-start
	***********************************************************************
	- getPL
	Paramenters:
	1. Playlist name
	Description:
	This one retrives the playlist internal number just by sending the
	playlist name, this is more like a workarround to the problem with launchy
	parameters cause it sends'em in lowercase and does not respect your input
	case.
	***********************************************************************
#comments-end
Func getPL($get_plname)
	Dim $get_plvar, $get_count, $get_pl, $get_i, $get_h

	$get_plvar = $iTunesApp.LibrarySource
	$get_count = Execute($get_plvar.Playlists.Count ())
	For $get_i = 1 To Int($get_count) Step 1
		$get_h = $get_h + 1
		$get_pl = $get_plvar.Playlists.item ($get_h)
		If StringLower($get_pl.Name) = StringLower($get_plname) Then
			Return $get_h
			ExitLoop
		EndIf
	Next
EndFunc   ;==>getPL


Func getActivePL()
	Dim $gap_plvar, $gap_count, $gap_pl, $gap_i

	$gap_plvar = $iTunesApp.LibrarySource
	$gap_count = Execute($gap_plvar.Playlists.Count ())
	
	For $gap_i = 1 To Int($gap_count) Step 1
		$gap_pl = $gap_plvar.Playlists.Item ($gap_i)
		
		If $gap_pl.Visible = 1 Then 
			Return $gap_i
			ExitLoop
		EndIf
	Next
	
EndFunc   ;==>getActivePL
#comments-start ***********************************************************************

	- Info
	Parameters:
	None
	Description:
	Shows the Current Track info in a fading tooltip.

#comments-end ***********************************************************************
Func showTrackInfo()
	Dim $stars, $total
	$total = ($iTunesApp.CurrentTrack ().Rating () / 20)
	$stars = starRating($total)

	TimeTool($iTunesApp.CurrentTrack ().Album () & $NL & _
			$iTunesApp.CurrentTrack ().TrackNumber () & ". " & $iTunesApp.CurrentTrack ().Name () & _
			" ( " & $iTunesApp.CurrentTrack ().Time () & " ) " & $NL & _
			"Rating: " & $stars & $NL & _
			$iTunesApp.CurrentTrack ().PlayedCount () & " times played before", _
			$TTF, $iTunesApp.CurrentTrack ().Artist (), 4)

EndFunc   ;==>showTrackInfo

#comments-start ***********************************************************************

	- artGUI
	Parameters:
	1. Type of art GUI to display
	Description:
	This function recives the text "art" or none to select which type of artGUI to display
	right now it just have 2 types:
	1. Just Artwork (used in the ART command)
	2. Artwork + Song Info (used in the TRACK command)

#comments-end ***********************************************************************
Func artGUI($type)
	#region --- GuiBuilder code Start ---
	; Script generated by AutoBuilder 0.6 Prototype
	If $type = "art"  Then
		$hGUI = GUICreate("iTunes AlbumArt", 262, 262)
	Else
		$hGUI = GUICreate("iTunes Info", 490, 270)
	EndIf
	$formato = 1
	If $iTunesApp.CurrentTrack.Artwork.Count () > 0 Then $formato = $iTunesApp.CurrentTrack.Artwork.Item (1).Format ()
	Dim $extension = ".jpg"
	Switch ($formato)
		Case 1
			$extension = ".jpg"
		Case 2
			$extension = ".png"
		Case 3
			$extension = ".bmp"
		Case Else
			$extension = ".jpg"
	EndSwitch
	$dir = @WorkingDir & "\art" & $extension
	If $iTunesApp.CurrentTrack.Artwork.Count () > 0 Then $iTunesApp.CurrentTrack.Artwork.Item (1).SaveArtworkToFile ($dir)
	$total = ($iTunesApp.CurrentTrack.Rating () / 20)
	$stars = starRating($total)
	_GDIP_Startup ()
	$hImage = _GDIP_ImageLoadFromFile (@WorkingDir & "\art" & $extension)
	If $hImage = 0 Then $hImage = _GDIP_ImageLoadFromFile (@WorkingDir & "\NA.jpg")
	$hBitmap = _GDIP_BitmapCreateHBITMAPFromBitmap ($hImage)
	$art = @WorkingDir & "\art.jpg"   ; Save bitmap to file
	_ScreenCap_SaveImage ($art, $hBitmap)
	_GDIP_ImageDispose ($hImage); Release resources
	_GDIP_Shutdown ()
	$hWnd = WinGetHandle("iTunes Info")
	GUISetState()
	_GDIP_Startup ()
	$hGraphic = _GDIP_GraphicsCreateFromHWND ($hWnd)
	$hBrush = _GDIP_BrushCreateSolid (0xff000000)
	$hFormat = _GDIP_StringFormatCreate ()
	$hFamily = _GDIP_FontFamilyCreate ("Verdana")
	$hFont10 = _GDIP_FontCreate ($hFamily, 10, 0)
	$hFont9 = _GDIP_FontCreate ($hFamily, 8, 0)
	If $type = "art"  Then
		$Pic_1 = GUICtrlCreatePic($art, 5, 5, 250, 250, $WS_BORDER)
		If FileExists($art) Then FileDelete($art) ; If the Artwork file exist, it deletes it
		If FileExists($dir) Then FileDelete($dir) ; If the Artwork file exist, it deletes it
		_GDIP_BrushDispose ($hBrush)
		_GDIP_GraphicsDispose ($hGraphic)
		_GDIP_Shutdown ()

	Else
		$Pic_1 = GUICtrlCreatePic($art, 10, 10, 250, 250, $WS_BORDER)
		If FileExists($art) Then FileDelete($art) ; If the Artwork file exist, it deletes it
		If FileExists($dir) Then FileDelete($dir) ; If the Artwork file exist, it deletes it
		_GDIP_GraphicsDrawStringEx ($hGraphic, $iTunesApp.CurrentTrack.Artist, $hFont10, _GDIP_RectFCreate (270, 50, 220, 20), $hFormat, $hBrush)
		_GDIP_GraphicsDrawStringEx ($hGraphic, $iTunesApp.CurrentTrack.Album, $hFont10, _GDIP_RectFCreate (270, 70, 220, 20), $hFormat, $hBrush)
		_GDIP_GraphicsDrawStringEx ($hGraphic, $iTunesApp.CurrentTrack.Name, $hFont10, _GDIP_RectFCreate (270, 90, 220, 20), $hFormat, $hBrush)
		_GDIP_GraphicsDrawStringEx ($hGraphic, "Length: " & $iTunesApp.CurrentTrack.Time, $hFont9, _GDIP_RectFCreate (270, 140, 220, 20), $hFormat, $hBrush)
		_GDIP_GraphicsDrawStringEx ($hGraphic, "Track #: " & $iTunesApp.CurrentTrack.TrackNumber, $hFont9, _GDIP_RectFCreate (270, 160, 220, 20), $hFormat, $hBrush)
		_GDIP_GraphicsDrawStringEx ($hGraphic, "Rating: " & $stars, $hFont9, _GDIP_RectFCreate (270, 180, 220, 20), $hFormat, $hBrush)
		_GDIP_GraphicsDrawStringEx ($hGraphic, "Played " & $iTunesApp.CurrentTrack.PlayedCount & " before", $hFont9, _GDIP_RectFCreate (270, 200, 220, 20), $hFormat, $hBrush)
		_GDIP_FontDispose ($hFont10)
		_GDIP_FontDispose ($hFont9)
		_GDIP_FontFamilyDispose ($hFamily)
		_GDIP_StringFormatDispose ($hFormat)
		_GDIP_BrushDispose ($hBrush)
		_GDIP_GraphicsDispose ($hGraphic)
		_GDIP_Shutdown ()
	EndIf
	While 1
		$msg = GUIGetMsg()
		Select
			Case $msg = $GUI_EVENT_CLOSE
				ExitLoop
			Case Else
				Sleep($AWF)
				ExitLoop
		EndSelect
	WEnd
	Exit
	#endregion --- GuiBuilder generated code End ---
EndFunc   ;==>artGUI

; *************************************************************************************
; Wrapper functions
; *************************************************************************************
Func trackInfoScreen()
	artGUI("")
EndFunc   ;==>trackInfoScreen

Func artScreen()
	artGUI("art")
EndFunc   ;==>artScreen

#comments-start ***********************************************************************

	- starRating
	Parameters:
	1. Number of stars you want to get
	Description:
	Just returns the string with the amout of * equal to the input number

#comments-end ***********************************************************************
Func starRating($Rate)
	Dim $Rating
	If $Rate > 1 Then
		$Rating = $Rate & " stars ("
	EndIf
	If $Rate = 1 Then
		$Rating = $Rate & " star ("
	EndIf
	$Rating = $Rate & " stars ("
	For $i = 1 To $Rate
		$Rating = $Rating & " * "
	Next
	$Rating = $Rating & ")"
	Return $Rating
EndFunc   ;==>starRating

#comments-start ***********************************************************************

	- TimeTool
	Parameters:
	1. Text to display
	2. Time to wait until fade
	3. Tooltip title
	4. Icon to show
	Description:
	This function recives the text, time until sleeps, title of the
	tooltip and the icon you want to display.
	Then generates a tooltip that will fade in the specified time(milliseconds)
	
	if snarl support is enabled then uses the snarl interface

#comments-end ***********************************************************************
Func TimeTool($text, $time, $title, $icon)
	
	If $Snarl_e = 1 Then ; If snarl support is enabled
		$formato = 1
		$hImage = 0
		
		If $iTunesApp.CurrentTrack.Artwork.Count () > 0 Then $formato = $iTunesApp.CurrentTrack.Artwork.Item (1).Format ()
		Dim $extension = ".jpg"
		Switch ($formato)
			Case 1
				$extension = ".jpg"
			Case 2
				$extension = ".png"
			Case 3
				$extension = ".bmp"
			Case Else
				$extension = ".jpg"
		EndSwitch
		$dir = @WorkingDir & "\art" & $extension
		
		If $iTunesApp.CurrentTrack.Artwork.Count () > 0 Then $iTunesApp.CurrentTrack.Artwork.Item (1).SaveArtworkToFile ($dir)
		_GDIP_Startup ()
		$hImage = _GDIP_ImageLoadFromFile (@WorkingDir & "\art" & $extension)
		If $hImage = 0 Then $hImage = _GDIP_ImageLoadFromFile (@WorkingDir & "\NA.jpg")
		$hBitmap = _GDIP_BitmapCreateHBITMAPFromBitmap ($hImage)
		$art = @WorkingDir & "\art.jpg"   ; Save bitmap to file
		_ScreenCap_SaveImage ($art, $hBitmap)
		_GDIP_ImageDispose ($hImage); Release resources
		_GDIP_Shutdown ()
		
		ShellExecute('Snarl_CMD.exe','snShowMessage ' & ($time/1000) & ' "' & $title & '" "' & $text & '" "' & $art & '"')
		; This waits for the Snarl notification disapears for it to delete the art file
		Sleep($time)
		If FileExists($art) Then FileDelete($art)
		; ******************************************************************************
	Else ; if Snarl support is disabled
		ToolTip($text, (@DesktopWidth - (@DesktopWidth / 2)) - 150, (@DesktopHeight - (@DesktopHeight / 2)), $title, $icon, 4)
		Sleep($time)
	EndIf
	
EndFunc   ;==>TimeTool

#comments-start ***********************************************************************

	- Configuration Window
	Description:
	This function runs the configuration window that let's the user to set the tooltip
	time and the art window time, the time is in seconds.

#comments-end ***********************************************************************
Func configWindow()		
	#Region ### START Koda GUI section ### Form=c:\users\frisley\proyectos\personales\programacion\ituny_au3\configform.kxf
	$Form1_1 = GUICreate("iTuny configuration", 571, 309, 193, 115)
	GUISetFont(8, 400, 0, "Verdana")
	$Tab1 = GUICtrlCreateTab(8, 8, 553, 289)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$TabSheet1 = GUICtrlCreateTabItem("Configuration")
	$Label1 = GUICtrlCreateLabel("Track panel display time:", 27, 63, 149, 17)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$Input1 = GUICtrlCreateInput($AWF_T, 192, 61, 57, 21)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$Label2 = GUICtrlCreateLabel("sec.", 258, 61, 27, 17)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$Button1 = GUICtrlCreateButton("Cancel", 400, 264, 75, 25, 0)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$Button2 = GUICtrlCreateButton("Apply", 480, 264, 75, 25, 0)
	GUICtrlSetFont(-1, 8, 800, 0, "Verdana")
	$Label3 = GUICtrlCreateLabel("Tooltip display time:", 56, 89, 120, 17)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$Input2 = GUICtrlCreateInput($TTF_T, 192, 89, 57, 21)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$Label4 = GUICtrlCreateLabel("sec.", 258, 90, 27, 17)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$Group1 = GUICtrlCreateGroup(" Twitter Credentials ", 32, 133, 249, 121)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$Label5 = GUICtrlCreateLabel("Username:", 59, 169, 67, 17)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$Label6 = GUICtrlCreateLabel("Password:", 62, 197, 63, 17)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$Input3 = GUICtrlCreateInput($Twitter_u, 126, 165, 121, 21)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$Input4 = GUICtrlCreateInput($Twitter_p, 125, 193, 121, 21)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	$Group2 = GUICtrlCreateGroup(" Pownce Credentials ", 296, 133, 241, 121)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$Label7 = GUICtrlCreateLabel("Password:", 323, 197, 63, 17)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$Label8 = GUICtrlCreateLabel("Username:", 319, 169, 67, 17)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$Input5 = GUICtrlCreateInput($Pownce_u, 400, 165, 121, 21)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$Input6 = GUICtrlCreateInput($Pownce_p, 400, 193, 121, 21)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	; Added on July 30 to toggle snarl notifications ***************************
	$Checkbox1 = GUICtrlCreateCheckbox("Enable Snarl Support", 392, 64, 145, 17)
	if $Snarl_e = 1 then GUICtrlSetState(-1, $GUI_CHECKED)
	; **************************************************************************
	$TabSheet2 = GUICtrlCreateTabItem("Network")
	$Group3 = GUICtrlCreateGroup(" Settings ", 24, 57, 521, 177)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$Label9 = GUICtrlCreateLabel("Username:", 295, 159, 67, 17)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$Label10 = GUICtrlCreateLabel("Password:", 299, 183, 63, 17)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$Label11 = GUICtrlCreateLabel("Server:", 55, 158, 48, 17)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$Label12 = GUICtrlCreateLabel("Port:", 71, 183, 32, 17)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$Input7 = GUICtrlCreateInput($proxy_u, 363, 157, 121, 21)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$Input8 = GUICtrlCreateInput($proxy_p, 363, 181, 121, 21)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$Input9 = GUICtrlCreateInput($proxy_server, 104, 157, 121, 21)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$Input10 = GUICtrlCreateInput($proxy_port, 104, 181, 121, 21)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$Radio1 = GUICtrlCreateRadio("Yes", 104, 111, 57, 17)
	if $proxy_enabled = 1 then GUICtrlSetState(-1, $GUI_CHECKED)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$Radio2 = GUICtrlCreateRadio("No", 176, 111, 49, 17)
	if $proxy_enabled = 4 then GUICtrlSetState(-1, $GUI_CHECKED)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$Label13 = GUICtrlCreateLabel("Activate Proxy Settings?", 56, 92, 143, 17)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	GUICtrlCreateGroup("", -99, -99, 1, 1)
	$Button3 = GUICtrlCreateButton("Cancel", 390, 255, 75, 25, 0)
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	$Button4 = GUICtrlCreateButton("Apply", 470, 255, 75, 25, 0)
	GUICtrlSetFont(-1, 8, 800, 0, "Verdana")
	$TabSheet3 = GUICtrlCreateTabItem("About")
	$Edit2 = GUICtrlCreateEdit("", 24, 42, 521, 241)
	GUICtrlSetData(-1, StringFormat("-------------------------------------------------------------------------------------------------\r\niTunes Control App version 0.5\r\n-------------------------------------------------------------------------------------------------\r\n\r\nDevelopers:\r\n   - Frisley Velasquez (main developer)\r\n   - jarethbone (colaborator)\r\n   - amadawn (original creator)\r\n\r\nSnarl support provided by:\r\n   - Snarl_CMD.exe developed by MozillaSnarls\r\n\r\nBlog: http://f0vela.wordpress.com\r\n\r\nSourceforge thread: \r\n   - https://sourceforge.net/forum/forum.php?forum_id=677087\r\n\r\nLatest Version:\r\n   - http://f0vela.wordpress.com/tag/ituny/\r\n\r\nSoftware and Images provided under GPLv2 License.\r\n\r\n-------------------------------------------------------------------------------------------------\r\nLast Update: july 30, 2008\r\n-------------------------------------------------------------------------------------------------"))
	GUICtrlSetFont(-1, 8, 400, 0, "Verdana")
	GUICtrlCreateTabItem("")
	GUISetState(@SW_SHOW)
	#EndRegion ### END Koda GUI section ###

	While 1
		$nMsg = GUIGetMsg()
		Switch $nMsg
			Case $GUI_EVENT_CLOSE
				$click = MsgBox(49,"iTuny :: Confirmation", "Are you sure you want to close this window?");
				if($click == 1) Then
					Exit
				EndIf
			
			Case $Button1
				$click = MsgBox(49,"iTuny :: Confirmation", "Are you sure you want to close this window?");
				if($click == 1) Then
					Exit
				EndIf			
			
			Case $Button2
				; save data code
				IniWriteSection($iniPath,"ArtWindow","time=" & GUICtrlRead ($Input1))
				IniWriteSection($iniPath,"Tooltip","time=" & GUICtrlRead ($Input2))
				If GUICtrlRead($Input3) <> "" AND GUICtrlRead($Input4) <> "" Then
					IniWriteSection($iniPath,"Twitter","username=" & GUICtrlRead ($Input3) & @LF & "password=" & RC4(GUICtrlRead ($Input4),$pw,0))
				EndIf
				If GUICtrlRead($Input5) <> "" AND GUICtrlRead($Input6) <> "" Then
					IniWriteSection($iniPath,"Pownce","username=" & GUICtrlRead ($Input5) & @LF & "password=" & RC4(GUICtrlRead ($Input6),$pw,0))
				EndIf
				IniWriteSection($iniPath,"Snarl","enabled=" & GUICtrlRead ($Checkbox1))
				Exit
			
			Case $Button3
				$click = MsgBox(49,"iTuny :: Confirmation", "Are you sure you want to close this window?");
				if($click == 1) Then
					Exit
				EndIf	
		
			Case $Button4
				
				$proxy_string = "server=" & GUICtrlRead ($Input9) & @LF & "port=" & GUICtrlRead ($Input10) & @LF & _
				"username=" & GUICtrlRead ($Input7) & @LF & "password=" & RC4(GUICtrlRead ($Input8),$pw,0) & @LF & _
				"enabled=" & GUICtrlRead ($Radio1)
			
				IniWriteSection($iniPath,"Network",$proxy_string)
				
				Exit	
		EndSwitch
	WEnd
EndFunc
#comments-start
	***********************************************************************
	- twince
	Paramenters:
	1. Text to send 	(string)
	2. HTTP Object 		(WinHTTP object)
	3. Service provider (Twitter or Pownce)
	Description:
	This allows you to post messager to twitter or pownce, the credentials for
	the proxy and the services got to be provided on the ini that can be changed 
	through the iTuny's Config GUI.
	***********************************************************************
#comments-end
Func twince($text,$twince_HTTP,$type)
	
	If $proxy_enabled = 1 Then
	$twince_HTTP.SetProxy (2, $proxy_server & ":" & $proxy_port, "")
	$twince_HTTP.Open ("POST", "http://google.com", False)
		If $proxy_u <> "" And $proxy_p <> "" Then
			$twince_HTTP.SetCredentials ($proxy_u, $proxy_p, 1)
		Else
			$twince_HTTP.SetAutoLogonPolicy (0)
		EndIf
	$twince_HTTP.Send()
	EndIf

	If $type = "twitter" Then 
		$twince_HTTP.Open ("POST", "http://twitter.com/statuses/update.xml?status=" & $text, False)
		$twince_HTTP.SetCredentials ($Twitter_u, $Twitter_p, 0)
		$twince_HTTP.Send()
	EndIf
	If $type = "pownce" Then 
		$twince_HTTP.Open ("POST", "http://api.pownce.com/2.0/send/message.json", False)
		; "?app_key=&note_to=public&note_body=" & $sText
		$text = "app_key=u0fvomvwj2biah729q8d61cwa31oh900&note_to=public&note_body=" & $text
		$twince_HTTP.SetCredentials ($Pownce_u, $Pownce_p, 0)
		$twince_HTTP.Send($text)
	EndIf
	
	
	$twince_msg = HTTPErrors($twince_HTTP.Status)
	
	Return $twince_msg
	
EndFunc
#comments-start
	***********************************************************************
	- HTTPErrors
	Paramenters:
	1. HTTP Error message
	Description:
	Uses the supplied value and returns a message for the HTTP return code.
	***********************************************************************
#comments-end
Func HTTPErrors($hMessage)
	Switch ($hMessage)
		Case 200
			$mess = "Message posted correctly!"
		Case 304
			$mess = "Sorry, there was no data to return."
		Case 500
			$mess = "Internal server error." 
		Case 502
			$mess = "The service is being upgraded or is down."
		Case 503
			$mess = "The service is unavailable right now, please try later." 
		Case 400
			$mess = "This request is invalid. Could be the service character limit."
		Case 401
			$mess = "Your username or password aren't correct, please check them on the config panel"
		Case 403
			$mess = "The message has been recived, but the service is not going to post it."
		Case 404
			$mess = "Sorry, the resource you're asking for does not exists."
		Case 407
			$mess = "Proxy authentication required, please see the network tab on the iTuny's config panel to solve this." 
		Case Else
			$mess = "Unknown problem: error code (" & $hMessage & ")" 
	EndSwitch
	Return $mess
EndFunc
Func iTunesPlayerStatus($ips_n)
	Switch ($ips_n)
		Case 0
			$ips_return = "Player is stopped"
		Case 1
			$ips_return = "Player is playing"
		Case 2
			$ips_return = "Player is fast forwarding"
		Case 3
			$ips_return = "Player is rewinding"
	EndSwitch
	
	Return $ips_return
EndFunc
#endregion ---- Function Area